#	This file is part of the Snoopy code.
#
#    Snoopy code is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    Snoopy code is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with the Snoopy code.  If not, see <http://www.gnu.org/licenses/>.

# Example of a Snoopy configuration file

configname = "Wall convection problem";

physics:									// Physics parameters
{
	boxsize = (1.0, 1.0,1.0); //AJB Lz must be TWICE Lz with z-walls -- this is Lz=1.4		

	reynolds = 2.0;	//10^(-reynolds) is viscosity etc
	reynolds_magnetic = 2.5;	
	reynolds_thermic = 2.0;
	
	omega = 10.0;					
	shear = 0.0;							
	brunt_vaissala_squared = -8.0;//background N^2. Evolves due to flux

	zc=0.1; //AJB centre of heating/cooling
	delz=0.2; //AJB width of heating/cooling
	alpha=0.0; //AJB if want stable layer near boundary alpha=dbdz
	theta=0.0; //AJB angle between Omega and gravity in degrees

	fluxrelax=true;//AJB relaxation method
	heating=true; //internal heating (integrating factor method)
	hyperdiffusion = false;
	nonlinearoff = false;
};

//-------------------------------------------------------------------------------------------------------------------------

code:										// code parameters
{
	cfl = 1.5;								// CFL safety factor. Should be smaller than sqrt(3) for RK3 to be stable.
	safety_source = 0.2;					// Safety factor for SHEAR, Coriolis and Boussinesq terms (should be ~0.2 for accuracy)
	
	t_initial = 0.0;						// Initial time of the simulation
	t_final = 3.0;							// Simulation will stop if it reaches this time
	max_t_elapsed = 1e30;					// Maximum elapsed time (in hours). Will stop after this elapsed time if t_final is not reached.
	
	interface_check = 1;					// Number of loops between two checks for a user input. On slow filesystems, increase this number 
	interface_output_file = true;			// Set to true to force interface outputs to a file instead of displaying them */
	
	force_symmetries = true;				// Uncomment to enforce spectral symmetries and mean flow to zero. Useful when N^2 or kappa^2 < 0. (see enforce_symm() )
	symmetries_step = 20;					// Number of loops between which the symmetries are enforced. Should be around ~20 for Boussinesq convection.
	
	antialiasing = true;					// 2/3 Antialiasing rule. Could be removed if you assume is unimportant (untested feature).

	restart = false;		// set to true to restart from a dump file. If no dump file is found, this option has no effect.
};

//-------------------------------------------------------------------------------------------------------------------------

output:										// output parameters
{
	timevar_step = 0.1;
	spectrum_step = 0.5; //AJB this is also profiles.dat output interval
	snapshot_step = 1.0; //AJB 3D .vtk snapshot interval
	dump_step = 10.0; //AJB restart file interval
	
	vtk_output = true;
	fortran_output_order = false;
	
	vorticity = true;

	timevar_vars = ( "t","ev","ed","et","thvz","thtotvz","thvx","uzrms","delT","vxmax","vxmin","vymax","vymin","vzmax","vzmin","w2","vxvy","hv","thmax","thmin");

};

//-------------------------------------------------------------------------------------------------------------------------

init:										// Initial conditions parameters
{		
	spatial_structure=true;
	large_scale_noise_k:
	{
		enable = false;
		amplitude = 1.0;			
	        kmin = 1.0;
		kmax = 12.0;
        };
};
		

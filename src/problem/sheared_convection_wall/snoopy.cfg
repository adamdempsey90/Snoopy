	
#	This file is part of the Snoopy code.
#
#    Snoopy code is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    Snoopy code is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with the Snoopy code.  If not, see <http://www.gnu.org/licenses/>.

# Example of a Snoopy configuration file

configname = "Sheared convection+walls problem";

// Only the variable which are different from default are set.

physics:									// Physics parameters
{
	boxsize = (1.0, 1.0, 1.0);				// Box length in X, Y and Z
	
	reynolds = 4.0;						
	reynolds_thermic = 4.0;				
        reynolds_magnetic = 4.0;	

	omega = 0.0;
	brunt_vaissala_squared = -1.0;
	shear = 0.0;

	hyperdiffusion = false;
	nonlinearoff = false;
};

//-------------------------------------------------------------------------------------------------------------------------

code:										// code parameters
{	
	cfl = 1.5;								// CFL safety factor. Should be smaller than sqrt(3) for RK3 to be stable.
	safety_source = 0.2;					// Safety factor for SHEAR, Coriolis and Boussinesq terms (should be ~0.2 for accuracy)	
	t_initial = 0.0;						// Initial time of the simulation
	t_final = 1e30;							// Simulation will stop if it reaches this time
	max_t_elapsed = 1e30;					// Maximum elapsed time (in hours). Will stop after this elapsed time if t_final is not reached.
	
	interface_check = 5;					// Number of loops between two checks for a user input. On slow filesystems, increase this number 
	interface_output_file = true;			// Set to true to force interface outputs to a file instead of displaying them */

	force_symmetries = false;				// Uncomment to enforce spectral symmetries and mean flow to zero. Useful when N^2 or kappa^2 < 0. (see enforce_symm() )
	symmetries_step = 20;					// Number of loops between which the symmetries are enforced. Should be around ~20 for Boussinesq convection.
	antialiasing = true;					// 2/3 Antialiasing rule. Could be removed if you assume is unimportant (untested feature).

	restart = false;						// set to true to restart from a dump file. If no dump file is found, this option has no effect.
};

//-------------------------------------------------------------------------------------------------------------------------

output:										// output parameters
{
	timevar_step = 0.1;						// Time between two outputs in the timevar file
	snapshot_step = 0.1;					// Time between two snapshot outputs
        spectrum_step = 1.0;						// Time between two outputs in the spectrum file
	dump_step = 1.0;						// Time between two restart dump outputs (restart dump are erased)
};
	vtk_output = true;
        vorticity = true;
	timevar_vars = ( "t","ev","ed","vxmax","vxmin","vymax","vymin","vzmax","vzmin","w2","vxvy","em","bxby","hv","hm","j2","edm");
//-------------------------------------------------------------------------------------------------------------------------

init:										// Initial conditions parameters
{
large_scale_noise_k:
	{
		enable = true;						// set this to true to enable large scale noise
		amplitude = 0.1;					// noise amplitude
	        kmin = 1;
                kmax = 5;
        };

};
		
